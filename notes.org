* Things layers need to do
** DONE Contain a reference to canvas
** DONE Contain a reference to context
** Support matrix operations on context (via monkey-patching):
*** DONE Set matrix (with context update)
*** DONE Transform with matrix
*** DONE Reset transform
*** DONE Get inverse transform
** Support drawing
*** For maximum flexibility, each layer has independent:
**** DONE last_draw
**** DONE last_transform
**** DONE redraw_on_transform_change
**** DONE temp_canvas
***** DONE clear_temp_canvas()
***** DONE reset_temp_canvas()
***** DONE get_temp_canvas()
*** DONE Has strokes & stroke_buckets
*** DONE Has transforms & transform_buckets
*** DONE Draw takes a layer as argument
* Multiple layers
** DONE Add layer stack
** DONE Draw all layers on tick
** TODO Figure out whether to set redraw_on_transform_change for all layers simultaneously
** Allow layers to be:
*** DONE Added
*** DONE Removed
*** DONE Renamed
*** DONE Reordered
*** DONE Selected
** DONE Layer grouping and nesting?
*** Active library: https://github.com/ilikenwf/nestedSortable
**** Demo: http://ilikenwf.github.io/example.html
*** Deprecated library: https://github.com/mjsarfatti/nestedSortable
**** Demo: http://mjsarfatti.com/sandbox/nestedSortable/
*** TODO Add layer collapsing ?
**** Idea: You can choose any layer to collapse. Adjacent collapsed layers get aggregated and you just get a single small layer handle that says "n collapsed layers". There is a dropdown to expand, and you can select a specific layer to expand or select "(all)". This would also solve the layer-explosion problem by allowing you to completely hide away groups of layers you aren't working on.
** TODO Limit the total space the layers can occupy
** TODO Add layer clones
*** These clones are completely uneditable, and are complete replicas of another layer (and they stay in sync with those changes).
* New tools
** DONE Eraser
*** TODO Add outline of eraser so you can see how much you are erasing
** Line
*** DONE Free
*** DONE Snap to horizontal/vertical/45-degree(?)
** DONE Circle
*** Note: What to do in case of funky coordinate system? Maybe apply similar strategy to fix the paintbrush shape bug?
*** DONE Figure out weird Chrome rendering bug when ellipses get skinny
** DONE Rectangle
*** Note, this is actually defined by *three* points, because rotations (and thus non-axis-aligned rectanges) are a thing
*** Just let users draw axis-aligned (maybe?) but still need to handle non-axis aligned because the coordinate system at any point may be wonky
*** Example points: first point on line, second point on line, point that defines height
** DONE Table?
** DONE Polygon?
** TODO Paintbucket
** TODO Allow brush shape to be transformed?
** TODO Scale/reflect across arbitrary axix
** TODO Smooth transforms
*** Trace out a regular transform, like normal, from mousedown to mouseup
*** Instead of playing back at recorded speed, playback uniformly between start time and end time
** TODO Textbox
*** DONE Basic functionality
*** DONE Colour selection
*** DONE Font size selection
*** DONE Font style selection
*** DONE Alignment selection
*** TODO Add tool to smooth out typing (i.e. distribute letters evenly)
*** TODO Implement splitting for text
** TODO Scaling transforms that only move points, not adjust the actual canvas transform
*** Idea is that we can do, e.g. a horizontal stretch that doesn't distort the line widths but just spaces everything out more
*** Useful for the "zooming into number line with grid marks" use-case
*** We can already do these kinds of transforms with the "Apply transformations to individual events" checkbox, but there is no way to "record" them (they just mutate the underlying event for all of time)
*** Idea would be to apply same transform, but to a whole layer, and as a recordable event
*** Would probably mean layers need to keep around two kinds of transforms: first, one that transforms all the stroke points into some new coordinate system, and then second, one that transforms the actual canvas coordinate system (like what currently exists)
** TODO Framework idea:
*** Each of the actual drawings inherits from Stroke
*** The drawings all have a pnts array and all their drawing is based off that
*** Have a single Action for as many of these as possible
**** The Action just reports mouse events to some configurable function which returns a thing to draw
**** The Action draws previews of the thing on the overlay layer until completed, at which point it adds the real thing to draw to the timeline
* Timeline view
** DONE Figure out HOW!
*** Synchronized scrollbar reference: http://jsfiddle.net/kunknown/VVaEq/2/
** TODO Add time markings
** TODO Add optional snap to time markings
** TODO Figure out how to handle vertical scrolling
** Editing tools
*** TODO Copy/paste
*** Duplicate?
**** TODO Entire layers
**** DONE Events Within layer
**** DONE Events between layers
***** TODO Think about what it would mean to implement this for transforms as well
**** DONE Make duplicated strokes transformable (independent of their layer) so that they are actually useful
*** DONE Split event
*** DONE Evenly space out events
*** DONE Reverse event
*** DONE Move event from one timeline to another
*** DONE Move selected events to start/end at current time
*** DONE Stretch selected events to start/end at current time
*** TODO Select events by rectangular selection?
* Performance
** TODO Profile the drawing function (especially when it needs to redraw every frame)
** TODO Switch to using redraw_on_transform_change = false more often
*** Whenever a period of transformation begins / ends?
*** Always? Redraw in background, and use stale pictures in foreground?
**** DONE Investigate redrawing using Web Workers
***** Not available in Chrome yet! (https://bugs.chromium.org/p/chromium/issues/detail?id=563816)
**** TODO Investigate interleaving of transforming stale & redrawing
** TODO It's already kind of janky, even when not much is happening ...
** TODO Try making timelines skip updating when they are offscreen
*** https://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport/
* Refactoring
** TODO Refactor evalPeriod to take a function, apply it to each event
*** Use closures to support additional arguments
*** Transform events don't need to have an eval method, just expose the matrix
*** TODO Ensure this doesn't degrade performance
** TODO Try to fix the annoying hack in findTransformedPoint
*** Maybe give layers a getCurrentTransform method?
*** Maybe also make transformPeriod operate on matrix instead of context, so that we can perform this calculation on a matrix only instead of needing to temporarily mutate the context.
** TODO Remove all hard-coded references to height and width
** DONE Make derived classes properly call their parent constructors
** TODO SVGMatrix is deprecated, replace with DOMMatrix
** TODO Replace all fatal console.log messages with real errors (i.e. throw)
** TODO Clean up function/variable/class naming conventions
* Bugs
** TODO Brush stroke width (and shape!) is affected by current transform
*** Solution:
**** First create target brush in pixel space
**** Transform it via inverse of current transform; this is the brush we are trying to create
**** Find the stroke width and shape transform that will produce this brush
**** Store it along with the stroke (need one at every point in stroke, since transform changes!)
**** At draw time, temporarily set transformation matrix = matrix * brush_transform_matrix
** TODO Automatically generated layer names may collide
*** Suppose auto-naming says next layer is "Layer 5"
*** Now rename one of the current layers to "Layer 5"
*** Create new layer
*** Now you have duplicate layers!
** TODO Need to "reflow" (aka assign new ranks) when an event is deleted
** TODO Two instantaneous events at slightly different times will overlap in the Timeline UI
** DONE When transform events are deleted/changed, need to update descendants of layer as well as just the layer itself
** DONE Need to add nesting-awareness to post_transform_draw
** DONE Recording transformations in a child when the parent(s) have transforms is broken
*** Need to take the desired transform and transform it through the inverse of the ancestors' transforms to get the actual transform to apply.
** TODO Need to fix (or punt on) cut_event for complex objects (rectangles, tables, etc.)
* Improvements
** DONE Improve drag handling
*** Make global mouseup and mousemove events, attached to body
*** A mousedown event registers global handlers
*** Global mouseup and mousemove events delegate to the current handlers
*** This allows you to start a drag inside a canvas (or other element) and continue outside it
*** Also catch when the mouse leaves the entire body, and count that as mouseup
** TODO Make it so that any action on a layer selects it.
** TODO Make layer background change colour when selected.
** TODO Refactor buckets so that the the interface is more "automatic"
** DONE Make it so that when previewing a timeline move or scale, we hide the original events so you can actually see the preview better.
** Considering adding features to strokes (& other events) so that we never need to mutate the original data. This would make strokes lossless & always revertible to the original
*** TODO Add a time scaling parameter so the original deltas never need to be adjusted
*** TODO (Strokes only) Add a transform parameter so that points never need to be adjusted
** TODO Experiment with removing caps from line segments when drawing lines
* New Features
** DONE Images - layer background
** DONE Show/hide actions
** DONE Toggle sublayer animation feature
** DONE Viewport - temporary viewpoint transformation that doesn't affect timeline
*** DONE Add graphics to show viewport transforms
*** DONE Add indicator when viewport is not identify
*** DONE Add button to reset viewport
** TODO Global undo/redo
** TODO Select stroke by clicking
** TODO Add some notion of "clears"
*** Probably global? Not layer-specific?
** TODO View/edit properties of an event
*** TODO Edit points of drawing events (specifically for non-Stroke events)
** TODO Adjust playback speed (faster or slower)
** TODO Stencils
*** This would be a image-layer-like thing that doesn't have a timeline
*** You can toggle its visibility, but it never appears in the exported video
*** You can transform it around
*** The idea is that you trace over it - it helps you draw better
*** UI
**** TODO Should these go in the layer list, or be separate?
***** Currently thinking separate
**** TODO Probably have option to adjust opacity?
**** TODO Need some kind of ordering ability, since you want it to be on top of most layers, but underneath the layer you are drawing onto ... maybe they are always "just under" the currently selected layer?
***** This isn't ideal, since the current layer may already have stuff on it, and ideally you'd like it to be above the current stuff, but under the stuff you add when you trace over it ... hmm
**** TODO Need to have some UI for transforming them ... possibly handle this like selected-stroke-event transforms?
** TODO Grid lines
*** Overlay some grid.
*** "Grid" can also just be arbitrary horizontal and vertical reference lines.
*** Grid is fixed across time and across layers, but can be changed/hidden/removed by user at any point.
*** Add options to a bunch of the tools to snap to the grid.
**** E.g. drawing tools snap to grid lines or lattice points.
**** E.g. transformations can tell when you start near a line or lattice point and snap to the same offset on other lines or lattice points. Maybe this only applies to "smooth" transformations, where begin and end are the only thing that matter.
* UI Ideas
** TODO Move all tools to right side of canvas
** TODO Instead of having a small radio button beside each tool, enclose the full tool name in a button (similar to text alignment UI).
** TODO Put all additional tool options on the right side of canvas as well, either beside or below the main tool selection.
** TODO Hide/show additional tool options (stroke color & size, font options, table options, apply transforms to events checkbox, etc) as appropriate based on what tool is selected.
* Sound Recording
** TODO Figure out HOW
* Video Exporting
** TODO Figure out colour vibrancy issue (exported videos have less vibrant colours than the in-browser view)
** TODO Figure out why exported videos won't play except in VLC
** TODO Figure out why exporting is so slow and try to speed it up
*** Especially when there are large images involved
** DONE Fix bug where hidden layers still show up in exported video.
** DONE Implement forced filename extensions
* Save/Load
** DONE Implement basic functionality to serialize/deserialize to/from JSON
*** DONE Add a writeup about this, since it's non-trivial
*** DONE Start documentation for JSON format versioning
** DONE Move all global state to a single place
** DONE Implement functionality to stash/restore full global state
** DONE Implement "Save"
** DONE Implement "Save As"
** DONE Implement "Open"
** TODO Implement "New"
** DONE Implement basic folder navigation
** TODO Implement forced filename extensions
** DONE Implement file filtering based on extension
